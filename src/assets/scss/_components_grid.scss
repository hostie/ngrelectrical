/* ==========================================================================
   GRID
   ========================================================================== */

$-Grid-gutter-size: $-space;

/**
 * Core grid component
 *
 * DO NOT apply dimension utilities to the `Grid` element. All cell widths
 * and offsets should be applied to child grid cells.
 *
 * Example HTML:
 *
 * <ul class="Grid">
 *     <li class="Grid__cell u-size1of2">
 *         Content here
 *     </li>
 *     <li class="Grid__cell u-size1of2">
 *         Content here
 *     </li>
 * </ul>
 *
 * <div class="Grid [Grid--center]">
 *     <div class="Grid__cell u-size1of3">
 *         Content here
 *     </div>
 *     <div class="Grid__cell u-size1of3">
 *         Content here
 *     </div>
 * </div>
 */

/* Grid container
   ========================================================================== */

/**
 * All content must be contained within child `Grid__cell` elements.
 *
 * 1. Account for browser defaults of elements that might be the root node of
 *    the component.
 * 2. Ensure consistent default alignment.
 * 3. Remove inter-cell whitespace that appears between `inline-block` child
 *    elements.
 * 4. Offset container for child `Grid__cell` spacing.
 */

.Grid {
    display: block; /* [1] */
    margin: 0; /* [1] */
    padding: 0; /* [1] */
    list-style: none; /* [1] */
    text-align: left; /* [2] */
    letter-spacing: -.31em; /* [3] */
    margin-left: -$-Grid-gutter-size; /* [4] */
}

/**
 * Modifier: center align all grid cells
 */

.Grid--center {
    text-align: center;
}

/**
 * Modifier: right align all grid cells
 */

.Grid--right {
    text-align: right;
}

/**
 * Modifier: middle-align grid cells
 */

.Grid--middle > .Grid__cell {
    vertical-align: middle;
}

/**
 * Modifier: bottom-align grid cells
 */

.Grid--bottom > .Grid__cell {
    vertical-align: bottom;
}

/**
 * Modifier: reverse order
 *
 * Reversed rendered order of Grid cells, e.g. items 1, 2, 3, 4 in your
 * markup will display in order 4, 3, 2, 1 on your page.
 */

.Grid--rev {
    direction: rtl;
}

.Grid--rev > .Grid__cell {
    direction: ltr;
}


/* Grid cell
   ========================================================================== */

/**
 * No explicit width by default. Rely on combining `Grid-cell` with a dimension
 * utility or a component class that extends 'Grid'.
 *
 * 1. Fundamentals of the non-float grid layout.
 * 2. Make cells full-width by default.
 * 3. Gutter spacing of cells.
 * 4. Keeps content correctly aligned with the grid direction.
 * 5. Reset text change made in `Grid`.
 * 6. Controls vertical positioning of units.
 */

.Grid__cell {
    display: inline-block; /* [1] */
    width: 100%; /* [2] */
    padding-left: $-Grid-gutter-size; /* [3] */
    text-align: left; /* [4] */
    letter-spacing: normal; /* [5] */
    word-spacing: normal; /* [5] */
    vertical-align: top; /* [6] */
}

/**
 * Modifier: horizontally center one unit
 * Set a specific unit to be horizontally centered. Doesn't affect
 * any other units. Can still contain a child `Grid` object.
 */

.Grid__cell--center {
    display: block;
    margin: 0 auto;
}
